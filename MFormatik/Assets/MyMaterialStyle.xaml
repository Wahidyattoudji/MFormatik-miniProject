<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />


    <!--#region  Colors-->
    <!--  Material Colors  -->
    <SolidColorBrush x:Key="Material.blue" Color="#304fff" />
    <SolidColorBrush x:Key="Material.red" Color="#d32f2f" />
    <SolidColorBrush x:Key="Material.green" Color="#388e3c" />
    <SolidColorBrush x:Key="Material.yellow" Color="#fbc02d" />
    <SolidColorBrush x:Key="Material.orange" Color="#f57c00" />
    <SolidColorBrush x:Key="Material.purple" Color="#7b1fa2" />
    <SolidColorBrush x:Key="Material.teal" Color="#00796b" />
    <SolidColorBrush x:Key="Material.pink" Color="#c2185b" />
    <SolidColorBrush x:Key="Material.indigo" Color="#303f9f" />
    <SolidColorBrush x:Key="Material.cyan" Color="#00acc1" />
    <!--  Visa BOT Colors  -->
    <SolidColorBrush x:Key="VisaBOT.SideBar" Color="#212A3E" />
    <SolidColorBrush x:Key="VisaBOT.Green" Color="#FF3BD4AC" />
    <SolidColorBrush x:Key="VisaBOT.Brown" Color="#363636" />
    <SolidColorBrush x:Key="VisaBOT.Yellow" Color="#FFB5AC21" />
    <SolidColorBrush x:Key="VisaBOT.DarkBlue" Color="#1D4370" />
    <SolidColorBrush x:Key="VisaBOT.Separator" Color="#dae2ea" />
    <SolidColorBrush x:Key="VisaBOT.Border" Color="#784ff2" />
    <SolidColorBrush x:Key="VisaBOT.Gray" Color="#d0bfff" />
    <SolidColorBrush x:Key="VisaBOT.LightGray" Color="#eff2f7" />
    <!--  Holcim Colors  -->
    <SolidColorBrush x:Key="Holcim.DarkBlue" Color="#1D4370" />
    <SolidColorBrush x:Key="Holcim.CyanBlue" Color="#05BAF1" />
    <SolidColorBrush x:Key="Holcim.Green" Color="#7AC050" />
    <SolidColorBrush x:Key="Holcim.GradientGreen" Color="#930418" />
    <!--  Tools Colors  -->
    <SolidColorBrush x:Key="Tools.Red.Error" Color="#B3261E" />
    <SolidColorBrush x:Key="Tools.Red.Error.OnHover" Color="#410E0B" />
    <SolidColorBrush x:Key="Tools.Red.Delete" Color="#EC221F" />
    <SolidColorBrush x:Key="Tools.Red.Delete.OnHover" Color="#C00F0C" />
    <SolidColorBrush x:Key="Tools.Red.Pressed" Color="#FCB3AD" />

    <SolidColorBrush x:Key="Tools.Green" Color="#14AE5C" />
    <SolidColorBrush x:Key="Tools.Green.OnHover" Color="#02542D" />
    <SolidColorBrush x:Key="Tools.Green.Pressed" Color="#F9DEDC" />

    <SolidColorBrush x:Key="Tools.Blue" Color="#007AFF" />
    <SolidColorBrush x:Key="Tools.Blue.OnHover" Color="#304fff" />
    <SolidColorBrush x:Key="Tools.Blue.Pressed" Color="#7a7cff" />
    <SolidColorBrush x:Key="Tools.Blue.Border" Color="#004BFF" />

    <SolidColorBrush x:Key="Tools.Gray" Color="#BFBFC4" />
    <SolidColorBrush x:Key="Tools.Gray.light" Color="#EEEEEE" />
    <SolidColorBrush x:Key="Tools.Gray.Border" Color="#9295A5" />

    <SolidColorBrush x:Key="Tools.white" Color="#FFFFFF" />
    <SolidColorBrush x:Key="Tools.Black" Color="#010101" />
    <!--#endregion-->

    <!--#region Text Boxes-->
    <!--  Normal  -->
    <Style x:Key="TextBox.Normal" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource Tools.white}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="MinHeight" Value="40" />
        <Setter Property="BorderBrush" Value="{DynamicResource Tools.Gray.Border}" />
        <Setter Property="Padding" Value="4,0" />
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="Foreground" Value="{DynamicResource Tools.Black}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        x:Name="txtBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="6"
                        SnapsToDevicePixels="True">
                        <Grid Margin="{TemplateBinding Padding}">
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                            <Label
                                x:Name="WaterMarkerLabel"
                                Padding="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Tag}"
                                FontFamily="{TemplateBinding FontFamily}"
                                FontWeight="{TemplateBinding FontWeight}"
                                Foreground="{DynamicResource Tools.Gray}"
                                Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WaterMarkerLabel" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource VisaBOT.DarkBlue}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource VisaBOT.DarkBlue}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Tools.Red.Error}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel>
                        <AdornedElementPlaceholder />
                        <ItemsControl
                            Margin="0,5,0,0"
                            FontSize="12"
                            ItemsSource="{Binding}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Foreground="Red" Text="{Binding ErrorContent}" />
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Wrap  -->
    <Style
        x:Key="TextBox.Wrap"
        BasedOn="{StaticResource TextBox.Normal}"
        TargetType="{x:Type TextBox}">
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="MaxHeight" Value="300" />
        <Setter Property="Padding" Value="10,4" />
        <Setter Property="Width" Value="300" />
    </Style>
    <!--  SearchBox  -->
    <Style
        x:Key="TextBox.Search"
        BasedOn="{StaticResource TextBox.Normal}"
        TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="Width" Value="300" />
        <Setter Property="Height" Value="35" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border
                        x:Name="txtBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="8"
                        SnapsToDevicePixels="True">
                        <Grid Margin="{TemplateBinding Padding}">
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                            <Label
                                x:Name="WaterMarkerLabel"
                                Padding="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Tag}"
                                FontFamily="{TemplateBinding FontFamily}"
                                FontWeight="{TemplateBinding FontWeight}"
                                Foreground="{DynamicResource Tools.Gray}"
                                Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WaterMarkerLabel" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource VisaBOT.DarkBlue}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource VisaBOT.DarkBlue}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  PasswordBox  -->
    <Style x:Key="PasswordBox.Normal" TargetType="{x:Type PasswordBox}">
        <Setter Property="Background" Value="{DynamicResource Tools.white}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource Tools.Gray.Border}" />
        <Setter Property="Padding" Value="5,4" />
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="Foreground" Value="{DynamicResource Tools.Black}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="200" />
        <Setter Property="FontSize" Value="20" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border
                        x:Name="txtBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="6"
                        SnapsToDevicePixels="True">
                        <Grid Margin="{TemplateBinding Padding}">
                            <ScrollViewer
                                x:Name="PART_ContentHost"
                                Focusable="False"
                                HorizontalScrollBarVisibility="Hidden"
                                VerticalScrollBarVisibility="Hidden" />
                            <Label
                                x:Name="WaterMarkerLabel"
                                Padding="{TemplateBinding Padding}"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Tag}"
                                FontFamily="{TemplateBinding FontFamily}"
                                FontWeight="{TemplateBinding FontWeight}"
                                Foreground="{DynamicResource Tools.Gray}"
                                Visibility="Collapsed" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="PasswordChar" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WaterMarkerLabel" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource Tools.Blue.Border}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource Tools.Blue.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Buttons Simple-->

    <!--  Normal Blue  -->
    <Style x:Key="Button.Normal.blue" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
        <Setter Property="Background" Value="{DynamicResource Tools.Blue}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="6,4" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MaxHeight" Value="40" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".5" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Blue.OnHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Blue.Pressed}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Second Blue  -->
    <Style
        x:Key="Button.Second.blue"
        BasedOn="{StaticResource Button.Normal.blue}"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource Tools.Blue}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Tools.Blue.Border}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Blue.OnHover}" />
                            <Setter TargetName="btnBorder" Property="BorderBrush" Value="{DynamicResource Tools.Blue}" />
                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Blue.Pressed}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Third blue  -->
    <Style
        x:Key="Button.Third.blue"
        BasedOn="{StaticResource Button.Normal.blue}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Tools.white}" />
        <Setter Property="Foreground" Value="{DynamicResource Tools.Blue}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".2" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Blue.OnHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Blue.Pressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Normal Red  -->
    <Style x:Key="Button.Normal.Red" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
        <Setter Property="Background" Value="{DynamicResource Tools.Red.Delete}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="6,4" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MaxHeight" Value="40" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".5" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Red.Error}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Red.Pressed}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Second Red  -->
    <Style
        x:Key="Button.Second.Red"
        BasedOn="{StaticResource Button.Normal.Red}"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource Tools.Red.Delete}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Tools.Red.Delete.OnHover}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Red.Delete.OnHover}" />
                            <Setter TargetName="btnBorder" Property="BorderBrush" Value="{DynamicResource Tools.Red.Error}" />
                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Red.Pressed}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Third Red  -->
    <Style
        x:Key="Button.Third.Red"
        BasedOn="{StaticResource Button.Normal.Red}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Tools.white}" />
        <Setter Property="Foreground" Value="{DynamicResource Tools.Red.Delete}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".2" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Red.Delete.OnHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Red.Pressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Normal Green  -->
    <Style x:Key="Button.Normal.Green" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
        <Setter Property="Background" Value="{DynamicResource Tools.Green}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="6,4" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MaxHeight" Value="40" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".5" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Green.OnHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Green.Pressed}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Second Green  -->
    <Style
        x:Key="Button.Second.Green"
        BasedOn="{StaticResource Button.Normal.Green}"
        TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource Tools.Green}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Tools.Green}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Green}" />
                            <Setter TargetName="btnBorder" Property="BorderBrush" Value="{DynamicResource Tools.Green.OnHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Green.Pressed}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Third Green  -->
    <Style
        x:Key="Button.Third.Green"
        BasedOn="{StaticResource Button.Normal.Green}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Tools.white}" />
        <Setter Property="Foreground" Value="{DynamicResource Tools.Green}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".2" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Green}" />
                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Green.Pressed}" />
                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Buttons Text With Icon-->

    <!--  Icon Blue + Text  -->
    <Style x:Key="Icon.Text.blue" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
        <Setter Property="Background" Value="{DynamicResource Tools.Blue}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="5,0" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MaxHeight" Value="40" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{DynamicResource VisaBOT.DarkBlue}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="32" />
                            </Grid.ColumnDefinitions>
                            <Path
                                x:Name="Icon"
                                Grid.Column="1"
                                Width="auto"
                                Height="20"
                                Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                Fill="{DynamicResource Tools.white}"
                                FlowDirection="LeftToRight"
                                Stretch="Uniform" />
                            <ContentPresenter
                                x:Name="ContentPresenter"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".5" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="#235086" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Blue.Pressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="Gray" />
                            <Setter Property="Foreground" Value="LightGray" />
                            <Setter Property="BorderBrush" Value="DarkGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Icon Red + Text  -->
    <Style
        x:Key="Icon.Text.Red"
        BasedOn="{StaticResource Icon.Text.blue}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Tools.Red.Delete}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="32" />
                            </Grid.ColumnDefinitions>
                            <Path
                                x:Name="Icon"
                                Grid.Column="1"
                                Width="auto"
                                Height="20"
                                Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                Fill="{DynamicResource Tools.white}"
                                Stretch="Uniform" />
                            <ContentPresenter
                                x:Name="ContentPresenter"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".5" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Red.Delete.OnHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Red.Pressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="Gray" />
                            <Setter Property="Foreground" Value="LightGray" />
                            <Setter Property="BorderBrush" Value="DarkGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Icon Green + Text  -->
    <Style
        x:Key="Icon.Text.Green"
        BasedOn="{StaticResource Icon.Text.blue}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Tools.Green}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="35" />
                            </Grid.ColumnDefinitions>
                            <Path
                                x:Name="Icon"
                                Grid.Column="1"
                                Width="auto"
                                Height="20"
                                Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                Fill="{DynamicResource Tools.white}"
                                FlowDirection="LeftToRight"
                                Stretch="Uniform" />
                            <ContentPresenter
                                x:Name="ContentPresenter"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".5" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Green.OnHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Green.Pressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="Gray" />
                            <Setter Property="Foreground" Value="LightGray" />
                            <Setter Property="BorderBrush" Value="DarkGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Buttons Only Icon-->
    <!--  Icon Fixed  -->
    <Style x:Key="Icon.Only.Uniform" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Path
                        x:Name="Icon"
                        Width="auto"
                        Height="auto"
                        Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                        Fill="{DynamicResource Tools.Gray}"
                        Stretch="Uniform" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource Tools.Blue}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource Tools.Blue}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Icon" Property="Fill" Value="white" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Icon Scratched  -->
    <Style x:Key="Icon.Only.UniformToFill" TargetType="{x:Type Button}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Path
                            x:Name="Icon"
                            Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                            Fill="{DynamicResource Tools.Gray}"
                            Stretch="UniformToFill" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource Tools.Blue}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource Tools.Blue}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource VisaBOT.DarkBlue}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Icon Blue  -->
    <Style x:Key="Icon.blue" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
        <Setter Property="Background" Value="{DynamicResource Tools.Blue}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="5,0" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MaxHeight" Value="40" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <Path
                                x:Name="Icon"
                                Grid.Column="1"
                                Width="auto"
                                Height="20"
                                Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                Fill="{DynamicResource Tools.white}"
                                Stretch="Uniform" />
                            <ContentPresenter
                                x:Name="ContentPresenter"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".5" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Blue.OnHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Blue.Pressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="Gray" />
                            <Setter Property="Foreground" Value="LightGray" />
                            <Setter Property="BorderBrush" Value="DarkGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Icon Red + Text  -->
    <Style
        x:Key="Icon.Red"
        BasedOn="{StaticResource Icon.Text.blue}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Tools.Red.Delete}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <Path
                                x:Name="Icon"
                                Grid.Column="1"
                                Width="auto"
                                Height="20"
                                Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                Fill="{DynamicResource Tools.white}"
                                Stretch="Uniform" />
                            <ContentPresenter
                                x:Name="ContentPresenter"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".5" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Red.Delete.OnHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Red.Pressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="Gray" />
                            <Setter Property="Foreground" Value="LightGray" />
                            <Setter Property="BorderBrush" Value="DarkGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  Icon Green + Text  -->
    <Style
        x:Key="Icon.Green"
        BasedOn="{StaticResource Icon.Text.blue}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource VisaBOT.Green}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <Path
                                x:Name="Icon"
                                Grid.Column="1"
                                Width="auto"
                                Height="20"
                                Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                                Fill="{DynamicResource Tools.white}"
                                FlowDirection="LeftToRight"
                                Stretch="Uniform" />
                            <ContentPresenter
                                x:Name="ContentPresenter"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".5" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Green.OnHover}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Green.Pressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="Gray" />
                            <Setter Property="Foreground" Value="LightGray" />
                            <Setter Property="BorderBrush" Value="DarkGray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region TopBar (Horizontal Menu)-->
    <Style x:Key="TopMenu.RadioBtn.Normal" TargetType="RadioButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Foreground" Value="#88949A" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid>
                        <Border x:Name="border" Margin="0,0,0,0" />
                        <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                            <Path
                                x:Name="Icon"
                                Width="18"
                                Height="18"
                                Margin="0,0,6,2"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type RadioButton}}}"
                                Fill="{DynamicResource Tools.Gray}"
                                Stretch="Uniform" />
                            <ContentPresenter
                                x:Name="contentPresenter"
                                Grid.Column="1"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource Holcim.GradientGreen}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Holcim.GradientGreen}" />
                            <Setter TargetName="border" Property="BorderThickness" Value="0,0,0,4" />
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource Holcim.GradientGreen}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="border" Property="BorderThickness" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TopMenu.RadioBtn.NoIcon" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle
                                    Margin="2"
                                    SnapsToDevicePixels="True"
                                    Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                    StrokeDashArray="1 2"
                                    StrokeThickness="1" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="#959595" />
        <Setter Property="FontSize" Value="26" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="#959595" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid
                        x:Name="templateRoot"
                        Background="Transparent"
                        SnapsToDevicePixels="True">
                        <Border
                            x:Name="border"
                            BorderBrush="Red"
                            BorderThickness="0"
                            CornerRadius="10"
                            SnapsToDevicePixels="True" />
                        <Border x:Name="bd2" />
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="True">
                            <Setter Property="FocusVisualStyle">
                                <Setter.Value>
                                    <Style>
                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate>
                                                    <Rectangle
                                                        Margin="14,0,0,0"
                                                        SnapsToDevicePixels="True"
                                                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                                        StrokeDashArray="1 2"
                                                        StrokeThickness="1" />
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Foreground" Value="#3DD0FB" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}" />
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="MinHeight" Value="50" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </Style>

    <!--  #Endregion Top Bar  -->

    <!--#region SideBar (Vertical Menu)-->
    <!--  Menu Icon  -->
    <Style x:Key="SideMenu.ToggleButton.Icon" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <Viewbox
                            Width="20"
                            Height="20"
                            Margin="0,6,0,0"
                            Stretch="UniformToFill">
                            <Canvas Width="512" Height="512">
                                <Path
                                    x:Name="ico"
                                    Margin="0,0,0,0"
                                    Data="m32 0h448c17.671875 0 32 14.328125 32 32s-14.328125 32-32 32h-448c-17.671875 0-32-14.328125-32-32s14.328125-32 32-32zm0 0"
                                    Fill="{DynamicResource Tools.Gray}" />
                                <Path
                                    x:Name="ico1"
                                    Margin="0,20,0,0"
                                    Data="m32 128h448c17.671875 0 32 14.328125 32 32s-14.328125 32-32 32h-448c-17.671875 0-32-14.328125-32-32s14.328125-32 32-32zm0 0"
                                    Fill="{DynamicResource Tools.Gray}" />
                                <Path
                                    x:Name="ico2"
                                    Margin="0,40,0,0"
                                    Data="m32 256h448c17.671875 0 32 14.328125 32 32s-14.328125 32-32 32h-448c-17.671875 0-32-14.328125-32-32s14.328125-32 32-32zm0 0"
                                    Fill="{DynamicResource Tools.Gray}" />
                            </Canvas>
                        </Viewbox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                            <Setter TargetName="border" Property="BorderBrush" Value="#FFFFFF" />
                            <Setter TargetName="ico" Property="Fill" Value="{DynamicResource Tools.Blue}" />
                            <Setter TargetName="ico1" Property="Fill" Value="{DynamicResource Tools.Blue}" />
                            <Setter TargetName="ico2" Property="Fill" Value="{DynamicResource Tools.Blue}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                            <Setter TargetName="border" Property="BorderBrush" Value="#FFFFFF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SideMenu.RadioBtn.Normal" TargetType="{x:Type RadioButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Tools.Gray}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Height" Value="45" />
        <Setter Property="FlowDirection" Value="RightToLeft" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border
                        x:Name="menuButton"
                        Background="Transparent"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="130" />
                                <ColumnDefinition Width="60" />
                            </Grid.ColumnDefinitions>
                            <!--  Selected  -->
                            <Border
                                x:Name="btnSelected"
                                Grid.ColumnSpan="2"
                                Width="200"
                                HorizontalAlignment="Right"
                                CornerRadius="6 5 5 6" />
                            <!--  Indicator  -->
                            <Rectangle
                                Name="Indicator"
                                Grid.Column="1"
                                Width="4"
                                Height="45"
                                Margin="0,0,8,0"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                RadiusX="2"
                                RadiusY="2" />
                            <!--  Text  -->
                            <TextBlock
                                x:Name="txtName"
                                Grid.Column="0"
                                Margin="5,0,0,0"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                FontSize="{TemplateBinding FontSize}"
                                FontWeight="{TemplateBinding FontWeight}"
                                Foreground="{TemplateBinding Foreground}"
                                Text="{TemplateBinding Content}" />
                            <!--  Icon  -->
                            <Path
                                x:Name="Icon"
                                Grid.Column="1"
                                Width="25"
                                Height="25"
                                Margin="5,0,20,0"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type RadioButton}}}"
                                Fill="{DynamicResource Tools.Gray}"
                                Stretch="None" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="txtName" Property="Foreground" Value="{DynamicResource Holcim.GradientGreen}" />
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource Holcim.GradientGreen}" />
                            <Setter TargetName="Indicator" Property="Fill" Value="{DynamicResource Holcim.GradientGreen}" />
                            <Setter TargetName="Indicator" Property="Height" Value="20" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="#D1D5DB" />
                            <Setter TargetName="Indicator" Property="Fill" Value="{DynamicResource Holcim.GradientGreen}" />
                            <Setter TargetName="Indicator" Property="Height" Value="20" />
                            <Setter TargetName="btnSelected" Property="Background" Value="#2A364D" />
                            <Setter TargetName="txtName" Property="Foreground" Value="#D1D5DB" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SideMenu.RadioBtn.rectengle" TargetType="RadioButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Tools.Gray}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="FlowDirection" Value="RightToLeft" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border
                        x:Name="menuButton"
                        Margin="4,8"
                        Background="Transparent"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="6">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <!--  Selected  -->
                            <Border
                                x:Name="btnSelected"
                                Grid.ColumnSpan="2"
                                HorizontalAlignment="Right"
                                CornerRadius="6" />
                            <!--  Indicator  -->
                            <Rectangle
                                Name="Indicator"
                                Grid.Column="1"
                                Width="4"
                                Height="60"
                                Margin="0,0,8,0"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Center"
                                RadiusX="2"
                                RadiusY="2" />
                            <StackPanel Grid.Column="0">
                                <!--  Icon  -->
                                <Path
                                    x:Name="Icon"
                                    Width="32"
                                    Height="30"
                                    Margin="0,18,0,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type RadioButton}}}"
                                    Fill="{DynamicResource Tools.Gray}"
                                    Stretch="Uniform" />
                                <!--  Text  -->
                                <TextBlock
                                    x:Name="txtName"
                                    Margin="0"
                                    Padding="12"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    FontSize="{TemplateBinding FontSize}"
                                    FontWeight="{TemplateBinding FontWeight}"
                                    Foreground="{TemplateBinding Foreground}"
                                    Text="{TemplateBinding Content}" />
                            </StackPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="txtName" Property="Foreground" Value="{DynamicResource Tools.Blue}" />
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource Tools.Blue}" />
                            <Setter TargetName="Indicator" Property="Fill" Value="red" />
                            <Setter TargetName="Indicator" Property="Height" Value="60" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="menuButton" Property="Background" Value="{DynamicResource Tools.Blue}" />
                            <Setter TargetName="Icon" Property="Fill" Value="white" />
                            <Setter TargetName="Indicator" Property="Fill" Value="{DynamicResource Tools.Blue}" />
                            <Setter TargetName="Indicator" Property="Height" Value="60" />
                            <Setter TargetName="btnSelected" Property="Background" Value="{DynamicResource Tools.Gray.light}" />
                            <Setter TargetName="txtName" Property="Foreground" Value="white" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SideMenu.RadioBtn.rectengle.NoIndicator" TargetType="RadioButton">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Tools.Gray}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontWeight" Value="Regular" />
        <Setter Property="FlowDirection" Value="RightToLeft" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border
                        x:Name="menuButton"
                        Margin="4,5"
                        Background="Transparent"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="6">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <!--  Selected  -->
                            <Border
                                x:Name="btnSelected"
                                Grid.ColumnSpan="2"
                                HorizontalAlignment="Right"
                                CornerRadius="6" />
                            <StackPanel Grid.Column="0">
                                <!--  Icon  -->
                                <Path
                                    x:Name="Icon"
                                    Width="32"
                                    Height="30"
                                    Margin="0,18,0,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type RadioButton}}}"
                                    Fill="{DynamicResource Tools.Gray}"
                                    Stretch="Uniform" />
                                <!--  Text  -->
                                <TextBlock
                                    x:Name="txtName"
                                    Margin="0"
                                    Padding="12"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    FontSize="{TemplateBinding FontSize}"
                                    FontWeight="{TemplateBinding FontWeight}"
                                    Foreground="{TemplateBinding Foreground}"
                                    Text="{TemplateBinding Content}" />
                            </StackPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="txtName" Property="Foreground" Value="{DynamicResource Holcim.GradientGreen}" />
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource Holcim.GradientGreen}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="menuButton" Property="Background" Value="{DynamicResource Holcim.GradientGreen}" />
                            <Setter TargetName="Icon" Property="Fill" Value="white" />
                            <Setter TargetName="btnSelected" Property="Background" Value="{DynamicResource Tools.Gray.light}" />
                            <Setter TargetName="txtName" Property="Foreground" Value="white" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Date picker-->
    <Style x:Key="Style.DatePicker" TargetType="DatePicker">
        <Setter Property="FontSize" Value="15" />
        <Setter Property="Background" Value="{DynamicResource Tools.white}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource Tools.Gray.Border}" />
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="Foreground" Value="{DynamicResource Tools.Black}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Height" Value="40" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Grid>
                        <Border
                            x:Name="Border"
                            Grid.ColumnSpan="2"
                            Background="Transparent"
                            BorderBrush="{DynamicResource Tools.Gray.Border}"
                            BorderThickness="2"
                            CornerRadius="6"
                            SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="auto" />
                                </Grid.ColumnDefinitions>
                                <DatePickerTextBox
                                    x:Name="PART_TextBox"
                                    Grid.Column="0"
                                    Width="120"
                                    Padding="4,3"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    BorderThickness="0"
                                    FontSize="{TemplateBinding FontSize}"
                                    Foreground="Black"
                                    Style="{DynamicResource TextBox.Normal}" />
                                <Button
                                    x:Name="PART_Button"
                                    Grid.Column="1"
                                    Margin="0,2,5,2"
                                    Style="{DynamicResource Icon.Only.UniformToFill}"
                                    Tag="{DynamicResource calendar}" />
                                <Popup
                                    x:Name="PART_Popup"
                                    AllowsTransparency="True"
                                    HorizontalOffset="17"
                                    Placement="Bottom"
                                    PlacementTarget="{Binding ElementName=PART_TextBox}"
                                    StaysOpen="False" />
                                <Label
                                    x:Name="Watermark"
                                    Padding="11,0,20,0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center"
                                    Content="{TemplateBinding Tag}"
                                    FontFamily="Roboto"
                                    FontSize="18"
                                    Foreground="Black"
                                    Visibility="Collapsed" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Material.blue}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Material.blue}" />
                            <Setter TargetName="Border" Property="BorderThickness" Value="0.5,0.5,0.5,3" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Watermark" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Data Grid-->

    <!--#region Main Style-->
    <Style x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle
                            x:Name="Border"
                            Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                            SnapsToDevicePixels="True" />
                        <Polygon
                            x:Name="Arrow"
                            Margin="8,8,3,3"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Bottom"
                            Fill="Black"
                            Opacity="0.15"
                            Points="0,10 10,10 10,0"
                            Stretch="Uniform" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="main.DataGrid" TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#222528" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="HeadersVisibility" Value="Column" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="SelectionUnit" Value="FullRow" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="CanUserReorderColumns" Value="False" />
        <Setter Property="CanUserResizeRows" Value="False" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="GridLinesVisibility" Value="None" />
        <Setter Property="ColumnWidth" Value="*" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>
                                        <Button
                                            Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                            Command="{x:Static DataGrid.SelectAllCommand}"
                                            Focusable="false"
                                            Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,
                                                                                          TypeInTargetAssembly={x:Type DataGrid}}}"
                                            Visibility="{Binding HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.All}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        <DataGridColumnHeadersPresenter
                                            x:Name="PART_ColumnHeadersPresenter"
                                            Grid.Column="1"
                                            Visibility="{Binding HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                        <ScrollContentPresenter
                                            x:Name="PART_ScrollContentPresenter"
                                            Grid.Row="1"
                                            Grid.ColumnSpan="2"
                                            CanContentScroll="{TemplateBinding CanContentScroll}" />
                                        <ScrollBar
                                            x:Name="PART_VerticalScrollBar"
                                            Grid.Row="1"
                                            Grid.Column="2"
                                            Maximum="{TemplateBinding ScrollableHeight}"
                                            Orientation="Vertical"
                                            ViewportSize="{TemplateBinding ViewportHeight}"
                                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <Grid Grid.Row="2" Grid.Column="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar
                                                x:Name="PART_HorizontalScrollBar"
                                                Grid.Column="1"
                                                Maximum="{TemplateBinding ScrollableWidth}"
                                                Orientation="Horizontal"
                                                ViewportSize="{TemplateBinding ViewportWidth}"
                                                Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                                Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="main.DataGrid.Row.Style" TargetType="{x:Type DataGridRow}">
        <Setter Property="Margin" Value="0,4,0,0" />
        <Setter Property="Background" Value="#FFFFFF" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock
                        Margin="2,0,0,0"
                        VerticalAlignment="Center"
                        Foreground="Transparent"
                        Text="!" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border
                        x:Name="DGR_Border"
                        MinHeight="40"
                        Padding="0,8"
                        Background="{TemplateBinding Background}"
                        BorderThickness="0"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter
                                Grid.Column="1"
                                ItemsPanel="{TemplateBinding ItemsPanel}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <DataGridDetailsPresenter
                                Grid.Row="1"
                                Grid.Column="1"
                                SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                Visibility="{TemplateBinding DetailsVisibility}" />
                            <DataGridRowHeader
                                Grid.RowSpan="2"
                                SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                Visibility="{Binding HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                        </SelectiveScrollingGrid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Tools.Gray}" />
                <Setter Property="Foreground" Value="#ffffff" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource VisaBOT.DarkBlue}" />
                <Setter Property="Foreground" Value="#ffffff" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#dfdfdf" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="main.DataGrid.Cell.Style" TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid Background="Transparent">
                        <ContentPresenter
                            Margin="15,0"
                            VerticalAlignment="Center"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DataGrid.CopyIcon.Cell.Style" TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderThickness="0"
                        SnapsToDevicePixels="True">
                        <DockPanel LastChildFill="True">
                            <Button
                                x:Name="Copybutton"
                                Padding="0"
                                Background="Transparent"
                                BorderThickness="0"
                                Command="{Binding Path=DataContext.CopyCommand, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridCell}}, Path=Content.Text}"
                                Cursor="Hand"
                                DockPanel.Dock="Right"
                                ToolTip="Copy">
                                <Path
                                    x:Name="CopyIcon"
                                    Width="16"
                                    Height="16"
                                    Margin="5,0,0,0"
                                    VerticalAlignment="Center"
                                    Data="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"
                                    Fill="Black"
                                    Stretch="Uniform" />
                            </Button>
                            <ContentPresenter Margin="15,10" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Copybutton" Property="Background" Value="Transparent" />
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Copybutton" Property="Background" Value="Transparent" />
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="main.wrap.DataGrid.Cell.Style" TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Margin" Value="6,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderThickness="0"
                        SnapsToDevicePixels="True">
                        <TextBlock
                            Margin="{TemplateBinding Margin}"
                            VerticalAlignment="{TemplateBinding VerticalAlignment}"
                            Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.Text}"
                            TextWrapping="Wrap" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="main.ColumnHeaderGripper.Style" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="8" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="SizeWE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="main.DataGridColumnHeader.Style" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#69717D" />
        <Setter Property="Margin" Value="15,0,15,10" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <!--<Thumb
                            x:Name="PART_LeftHeaderGripper"
                            HorizontalAlignment="Left"
                            Style="{StaticResource main.ColumnHeaderGripper.Style}" />
                        <Thumb
                            x:Name="PART_RightHeaderGripper"
                            HorizontalAlignment="Right"
                            Style="{StaticResource main.ColumnHeaderGripper.Style}" />-->
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region Other Styles-->
    <Style x:Key="Icon.DataGrid.Cell" TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Margin" Value="10,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">

                    <Border
                        Background="{TemplateBinding Background}"
                        BorderThickness="0"
                        SnapsToDevicePixels="True">
                        <StackPanel Orientation="Horizontal">
                            <Path
                                x:Name="Icon"
                                Width="10"
                                Height="{TemplateBinding FontSize}"
                                Margin="0,0,0,0"
                                Data="{DynamicResource lock}"
                                Fill="Green"
                                Stretch="Uniform" />
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Icon.SortDirection.DataGridColumnHeader.Style" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="#69717D" />
        <Setter Property="Margin" Value="15,0,10,10" />
        <Setter Property="FontFamily" Value="expo arabic" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Border
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <StackPanel Margin="-10,0,0,0" Orientation="Horizontal">
                                <StackPanel Margin="0,0,8,0" Orientation="Horizontal">
                                    <Path
                                        x:Name="SortUp"
                                        Width="10"
                                        Height="{TemplateBinding FontSize}"
                                        Data="{DynamicResource SortUp}"
                                        Fill="Gray"
                                        Stretch="Uniform" />
                                    <Path
                                        x:Name="SortDown"
                                        Width="10"
                                        Height="{TemplateBinding FontSize}"
                                        Data="{DynamicResource SortDown}"
                                        Fill="Gray"
                                        Stretch="Uniform" />
                                </StackPanel>
                                <ContentPresenter
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    RecognizesAccessKey="True"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </StackPanel>
                        </Border>
                        <Thumb
                            x:Name="PART_LeftHeaderGripper"
                            HorizontalAlignment="Left"
                            Style="{DynamicResource main.ColumnHeaderGripper.Style}" />
                        <Thumb
                            x:Name="PART_RightHeaderGripper"
                            HorizontalAlignment="Right"
                            Style="{DynamicResource ColumnHeaderGripperStyle}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortDirection" Value="Ascending">
                            <Setter TargetName="SortDown" Property="Fill" Value="{DynamicResource Tools.Blue}" />
                        </Trigger>
                        <Trigger Property="SortDirection" Value="Descending">
                            <Setter TargetName="SortUp" Property="Fill" Value="{DynamicResource Tools.Blue}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#endregion-->

    <!--#region Check Box-->

    <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070" />
    <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF" />
    <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD" />
    <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC" />
    <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070" />
    <Style x:Key="CheckBoxStyle1" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource OptionMark.Static.Background}" />
        <Setter Property="BorderBrush" Value="#DAE2EA" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid
                        x:Name="templateRoot"
                        Background="Transparent"
                        SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="checkBoxBorder"
                            Width="25"
                            Height="25"
                            Margin="1"
                            Padding="1"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3">
                            <Grid x:Name="markGrid">
                                <Path
                                    x:Name="optionMark"
                                    Data="M19.78,2.2L24,6.42L8.44,22L0,13.55L4.22,9.33L8.44,13.55L19.78,2.2M19.78,5L8.44,16.36L4.22,12.19L2.81,13.55L8.44,19.17L21.19,6.42L19.78,5Z"
                                    Fill="{DynamicResource OptionMark.Static.Glyph}"
                                    Opacity="0"
                                    Stretch="Uniform" />
                                <Rectangle
                                    x:Name="indeterminateMark"
                                    Margin="3"
                                    Fill="{DynamicResource OptionMark.Static.Glyph}"
                                    Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                            <Setter Property="Padding" Value="4,-1,0,0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource OptionMark.MouseOver.Background}" />
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="#9575CD" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource OptionMark.MouseOver.Glyph}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource OptionMark.MouseOver.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource OptionMark.Disabled.Background}" />
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{DynamicResource OptionMark.Disabled.Border}" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource OptionMark.Disabled.Glyph}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource OptionMark.Disabled.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{DynamicResource OptionMark.Pressed.Background}" />
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="#9575CD" />
                            <Setter TargetName="optionMark" Property="Fill" Value="{DynamicResource OptionMark.Pressed.Glyph}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{DynamicResource OptionMark.Pressed.Glyph}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                            <Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="optionMark" Property="Opacity" Value="0" />
                            <Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

    <!--#region ComboBox-->
    <ControlTemplate x:Key="main.ComboBox.ToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid HorizontalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="40" />
            </Grid.ColumnDefinitions>
            <Border
                x:Name="Border"
                Grid.ColumnSpan="2"
                Width="auto"
                HorizontalAlignment="Stretch"
                Background="Transparent"
                BorderBrush="{DynamicResource Tools.Gray.Border}"
                BorderThickness="2"
                CornerRadius="6"
                SnapsToDevicePixels="true" />
            <Border
                Grid.Column="1"
                Width="80"
                Margin="-60,0,0,0"
                Background="Transparent">
                <Path
                    x:Name="Arrow"
                    Width="11"
                    Height="7"
                    Margin="0,0,-40,0"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"
                    Fill="{DynamicResource Tools.Gray}"
                    Stretch="Fill" />
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Material.blue}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Material.blue}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource Material.blue}" />
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource Material.blue}" />
                <Setter TargetName="Border" Property="BorderThickness" Value="0.5,0.5,0.5,3" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="main.ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border
            x:Name="PART_ContentHost"
            HorizontalAlignment="Stretch"
            Background="{TemplateBinding Background}"
            Focusable="False" />
    </ControlTemplate>

    <Style x:Key="main.ComboBox.ItemContainer.Style" TargetType="ComboBoxItem">
        <Setter Property="Height" Value="30" />
        <Setter Property="Padding" Value="5,0,0,0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border
                        x:Name="Border"
                        Width="auto"
                        HorizontalAlignment="Stretch"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            Width="auto"
                            Margin="8,0,0,0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="main.ComboBox.Style" TargetType="{x:Type ComboBox}">
        <Setter Property="Height" Value="40" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton
                            x:Name="ToggleButton"
                            Grid.Column="2"
                            ClickMode="Press"
                            Focusable="False"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Template="{DynamicResource main.ComboBox.ToggleButton}" />
                        <ContentPresenter
                            x:Name="ContentSite"
                            Margin="8,3,23,3"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            IsEnabled="True"
                            IsHitTestVisible="False" />
                        <Label
                            x:Name="Watermark"
                            Padding="20,0,0,0"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Content="{TemplateBinding Tag}"
                            FontSize="15"
                            Foreground="{DynamicResource Tools.Gray}"
                            Visibility="Collapsed" />
                        <TextBox
                            x:Name="PART_EditableTextBox"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Focusable="True"
                            Template="{DynamicResource main.ComboBoxTextBox}"
                            Visibility="Hidden" />
                        <Popup
                            x:Name="Popup"
                            AllowsTransparency="True"
                            Focusable="False"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Placement="Bottom"
                            PopupAnimation="Slide">
                            <Grid
                                x:Name="DropDown"
                                MinWidth="{TemplateBinding ActualWidth}"
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                SnapsToDevicePixels="True">
                                <Border
                                    x:Name="DropDownBorder"
                                    Background="White"
                                    BorderBrush="{DynamicResource Tools.Blue}"
                                    BorderThickness="2" />
                                <ScrollViewer
                                    Margin="4,16,4,16"
                                    FontSize="15"
                                    Foreground="Black"
                                    OverridesDefaultStyle="True"
                                    SnapsToDevicePixels="True" />
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                            </Grid>
                        </Popup>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value="" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Watermark" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource Tools.Red.Error}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel>
                        <AdornedElementPlaceholder />
                        <ItemsControl
                            Margin="0,5,0,0"
                            FontSize="12"
                            ItemsSource="{Binding}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Foreground="Red" Text="{Binding ErrorContent}" />
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <!--#endregion-->

    <!--#region Borders-->
    <Style x:Key="Window.Border.Style" TargetType="Border">
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="Background" Value="White" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect
                    BlurRadius="10"
                    Direction="320"
                    Opacity="0.5"
                    ShadowDepth="4"
                    Color="Gray" />
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region Popup Menu-->
    <Style
        x:Key="Popup.Image.Button"
        BasedOn="{StaticResource Button.Normal.Green}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Tools.white}" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="{TemplateBinding Width}"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                        <!--  Use StackPanel to place Image and Text together  -->
                        <StackPanel
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Orientation="Horizontal">
                            <!--  Image for the icon  -->
                            <Image
                                Width="26"
                                Height="26"
                                RenderOptions.BitmapScalingMode="HighQuality"
                                SnapsToDevicePixels="True"
                                Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}"
                                Stretch="Uniform" />
                            <ContentPresenter
                                x:Name="ContentPresenter"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </StackPanel>
                        <Border.Effect>
                            <DropShadowEffect
                                BlurRadius="1"
                                Direction="0"
                                Opacity="0.5"
                                RenderingBias="Quality"
                                ShadowDepth="0.2" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="lightgray" />
                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{DynamicResource Tools.Gray}" />
                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="Popup.Menu.button"
        BasedOn="{StaticResource Button.Normal.blue}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="Foreground" Value="{DynamicResource Tools.Blue}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="btnBorder"
                        Width="36"
                        Height="36"
                        MaxHeight="{TemplateBinding MaxHeight}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        CornerRadius="500"
                        SnapsToDevicePixels="True">
                        <Path
                            x:Name="Icon"
                            Height="36"
                            Data="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"
                            Fill="{DynamicResource Tools.Gray.Border}"
                            SnapsToDevicePixels="True"
                            Stretch="Uniform" />
                        <Border.Effect>
                            <DropShadowEffect
                                Direction="0"
                                Opacity=".3"
                                ShadowDepth=".2" />
                        </Border.Effect>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Fill" Value="{DynamicResource Tools.Blue.OnHover}" />
                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">

                            <Setter Property="Foreground" Value="{DynamicResource Tools.white}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->


    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA" />
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da" />
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA" />
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA" />
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA" />
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA" />

    <Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="4,1" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border
                        x:Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="10 0 0 10"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>






</ResourceDictionary>